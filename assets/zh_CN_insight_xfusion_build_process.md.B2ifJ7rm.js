import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.BZKnb7tL.js";const b=JSON.parse('{"title":"xfusion 构建流程","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/insight/xfusion_build_process.md","filePath":"zh_CN/insight/xfusion_build_process.md"}'),e={name:"zh_CN/insight/xfusion_build_process.md"},l=n(`<h1 id="xfusion-构建流程" tabindex="-1">xfusion 构建流程 <a class="header-anchor" href="#xfusion-构建流程" aria-label="Permalink to &quot;xfusion 构建流程&quot;">​</a></h1><p>本文简要说明 xfusion 的构建流程。</p><hr><p><strong>阅读对象：</strong></p><ul><li>想要深入了解 <code>xfusion</code> 框架的用户以及移植开发者。</li></ul><hr><h2 id="export-阶段" tabindex="-1">export 阶段 <a class="header-anchor" href="#export-阶段" aria-label="Permalink to &quot;export 阶段&quot;">​</a></h2><p>构建之初会使用<code>export</code>脚本激活<code>xfuison</code></p><p>windows cmd:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.\\export.bat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>windows powershell:</p><div class="language-powershell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.\\export.ps1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>linux:</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./export.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">targe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其目的首先是导出<code>XF_ROOT</code>、<code>XF_TARGET</code>、<code>XF_VERSION</code>、<code>XF_TARGET_PATH</code> 四个临时环境变量。关闭当前<code>shell</code>则环境变量消失。 其次，创建<code>python</code>虚拟环境（如果当前出于<code>python</code>虚拟环境中,则不创建）。 最后安装位于<code>tools/xf_build/</code>下的<code>xf_build</code>构建工具</p><hr><h2 id="前期判断" tabindex="-1">前期判断 <a class="header-anchor" href="#前期判断" aria-label="Permalink to &quot;前期判断&quot;">​</a></h2><p>当我们执行<code>xf build</code>命令的时候。 会自动调用 <code>tools/xf_build/xf_build/xf_build/cmd/cmd.py</code>中的<code>build()</code>函数。 <code>build()</code>函数操作：</p><ol><li><p><strong>检查是否是工程目录。</strong> 此检查是通过当前目录下有无<code>xf_project.py</code>实现的。 后续会创建临时环境变量<code>XF_PROJECT_PATH</code>保存工程路径。</p></li><li><p><strong>检查当前目标有无改变。</strong> 这里利用了<code>XF_ROOT</code>下的<code>build/project_info.json</code>保存的<code>XF_TARGET_PATH</code>对比当前环境变量中的<code>XF_TARGET_PATH</code>是否一致。如果不一致，则调用<code>xf clean</code>命令进行清除</p></li><li><p><strong>检查当前工程有无改变。</strong> 这里利用了<code>XF_ROOT</code>下的<code>build/project_info.json</code>保存的<code>XF_PROJECT_PATH</code>对比当前环境变量中的<code>XF_PROJECT_PATH</code>是否一致。如果不一致，则调用<code>xf clean</code>命令进行清除</p></li><li><p><strong>执行<code>xf_project.py</code>脚本, 完成收集编译信息任务</strong></p></li></ol><hr><h2 id="收集阶段" tabindex="-1">收集阶段 <a class="header-anchor" href="#收集阶段" aria-label="Permalink to &quot;收集阶段&quot;">​</a></h2><p><code>xf_project.py</code>被执行后，其内容大致如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xf_build.project_init()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xf_build.program()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>project_init()</code>方法位于<code>tools/xf_build/xf_build/xf_build/__init__.py</code>文件中。 主要完成默认<code>project</code>对象的创建，以及简化其方法的调用</p><p><code>program()</code>方法位于<code>tools/xf_build/xf_build/xf_build/build.py</code>文件中。 <code>program()</code>主要的作用是：</p><ol><li>将<code>XF_ROOT</code>下的<code>components</code>文件夹下的所有文件夹视为一个个组件。</li><li>将<code>XF_PROJECT_PATH</code>下的<code>components</code>文件夹下的所有文件夹视为一个个组件。</li><li>将<code>XF_PROJECT_PATH</code>下的<code>main</code>视为一个组件。</li><li>执行所有组件的<code>xf_collect.py</code>文件</li><li>最终将所有的构建信息收集到<code>XF_PROJECT_PATH</code>下的<code>build/build_environ.json</code>中</li></ol><p>其中<code>xf_collect.py</code>文件大致为：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xf_build.collect()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>collect()</code>方法的<code>srcs</code>默认为<code>[&quot;*.c&quot;]</code>、<code>inc_dirs</code>默认为<code>[&quot;.&quot;]</code>。如果不设置具体内容，则默认收集该文件夹内的所有<code>.c</code>文件。可以自定义，直接采取默认参数。</p><p>还有个参数是<code>requires</code>。主要涉及到组件之间的依赖关系。如果<code>A</code>需要<code>B</code>组件里面的函数则在<code>A</code>的<code>xf_collect.py</code>文件中的<code>collect()</code>改为<code>collect(requires=[B])</code>组件名为文件夹名。</p><p>TODO: 后续将会添加更多的指令收集，如：<code>cflag</code>等编译参数收集。</p><hr><h2 id="插件编译部分" tabindex="-1">插件编译部分 <a class="header-anchor" href="#插件编译部分" aria-label="Permalink to &quot;插件编译部分&quot;">​</a></h2><p>上个阶段的末期会调用<code>XF_ROOT</code>下的<code>plugins</code>下的<code>XF_TARGET</code>插件。这部分需要移植者针对不同的<code>target</code>进行对应的编译插件开发。</p><p>插件开发需要完成以下几个功能：</p><ol><li><p>创建你所需要的<code>target</code>文件夹</p></li><li><p>在<code>target</code>文件夹下创建<code>__init__.py</code>文件。该文件内容如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>只有该文件存在，才会被识别为一个<code>python</code>包</p></li><li><p>在<code>target</code>文件夹下创建<code>build.py</code>文件。该文件内容如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hookimpl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build.get_hookimpl()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> esp32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     这里对接编译的内容。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     通过 XF_PROJECT_PATH 下的</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     build/build_environ.json 文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     生成对应的sdk构建脚本</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     启动sdk的编译命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     这里对接清除编译命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     这里对接烧录命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     这里对接导出命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     这里对接导出更新命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> menuconfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     这里sdk的menuconfig命令。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div></li></ol>`,36),p=[l];function t(o,d,c,r,h,k){return i(),a("div",null,p)}const g=s(e,[["render",t]]);export{b as __pageData,g as default};
