import{_ as s,c as i,o as a,a2 as n,a8 as e}from"./chunks/framework.BZKnb7tL.js";const g=JSON.parse('{"title":"新建工程与用户组件","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/get-started/project/new_project_and_user_component.md","filePath":"zh_CN/get-started/project/new_project_and_user_component.md"}'),p={name:"zh_CN/get-started/project/new_project_and_user_component.md"},l=n(`<h1 id="新建工程与用户组件" tabindex="-1">新建工程与用户组件 <a class="header-anchor" href="#新建工程与用户组件" aria-label="Permalink to &quot;新建工程与用户组件&quot;">​</a></h1><p>本文介绍 xfusion 中基础工程概念以及如何创建带有用户组件的工程。</p><hr><p><strong>阅读对象：</strong></p><ul><li>xfusion 用户。</li></ul><hr><h1 id="xfusion-工程介绍" tabindex="-1">xfusion 工程介绍 <a class="header-anchor" href="#xfusion-工程介绍" aria-label="Permalink to &quot;xfusion 工程介绍&quot;">​</a></h1><p>一个典型的 xfusion 用户工程通常由以下部分组成：</p><ol><li>用户主程序 <code>main</code>；</li><li>用户组件 <code>components 内的组件</code>；</li><li>工程脚本 <code>xf_project.py</code>；</li><li>收集脚本 <code>xf_collect.py</code>；</li></ol><p>其<span id="file_tree">文件树</span>如下所示：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>📦xf_project_sample</span></span>
<span class="line"><span> ┣ 📂components</span></span>
<span class="line"><span> ┃ ┗ 📂foo</span></span>
<span class="line"><span> ┃ ┃ ┣ 📜XFKconfig</span></span>
<span class="line"><span> ┃ ┃ ┣ 📜foo.c</span></span>
<span class="line"><span> ┃ ┃ ┣ 📜foo.h</span></span>
<span class="line"><span> ┃ ┃ ┗ 📜xf_collect.py</span></span>
<span class="line"><span> ┣ 📂main</span></span>
<span class="line"><span> ┃ ┣ 📜xf_collect.py</span></span>
<span class="line"><span> ┃ ┗ 📜xf_main.c</span></span>
<span class="line"><span> ┗ 📜xf_project.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><p><code>xf_project.py</code></p><p>工程脚本 <code>xf_project.py</code> 的内容通常如下，主要完成工程变量（如工程名）的初始化、所有源码的收集工作，并且<strong>默认以当前文件夹的名字作为工程名</strong>。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xf_build.project_init()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xf_build.program()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>xf_collect.py</code></p><p>每个组件下均会有 <code>xf_collect.py</code> 用于<strong>标记当前组件所拥有的源文件、头文件目录以及依赖情况</strong>，内容通常如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">srcs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*.c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">incs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reqs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xf_utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xf_build.collect(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">srcs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">srcs, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inc_dirs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">incs, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">requires</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reqs)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果源文件和头文件都在组件文件夹的根目录，<code>srcs</code> 与 <code>inc_dirs</code> 参数均可以省略，默认参数会收集组件文件夹的根目录的源文件和头文件。</p><p>依赖参数 <code>requires</code> 用于表示当前组件依赖哪些组件，其中 <code>xf_utils</code> 包含通用定义和常用的接口，因此一般都需要加入依赖。</p></li><li><p><code>XFKconfig</code></p><p><code>XFKconfig</code> 等同于 <code>Kconfig</code>，用于在 <code>build/header_config/xfconfig.h</code> <strong>生成以 <code>CONFIG_</code> 开头的配置宏定义</strong>。</p><p><code>XFKconfig</code> 示例如下，他最终会生成宏定义 <code>CONFIG_COMPONENTS_TEST_VAL</code>。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>config COMPONENTS_TEST_VAL</span></span>
<span class="line"><span>    int &quot;test value&quot;</span></span>
<span class="line"><span>    default &quot;1234&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>📂main</code></p><p>即为<strong>用户主程序</strong>。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p></p><ol><li><p>由于历史原因 <code>📂main</code> 的文件夹仍然叫 <code>main</code>，实际在生成 esp-idf 组件时的名字叫 <code>user_main</code>，实际上改名为 <code>xf_main</code> 会更合适。</p></li><li><p><code>main</code> 组件的 <code>xf_collect.py</code> 脚本中可以不写依赖参数 <code>requires</code>，因为 xf_build 会自动添加所有组件作为 <code>main</code> 组件的依赖。</p></li></ol></div></li></ul><p>关于工程的源文件有以下几点需要注意。</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><ol><li><p><strong>建议使用 <code>xf_main.c</code></strong> 作为用户主程序文件名，不建议使用 <code>main.c</code>。</p><p>因为某些 SDK 中没有将组件打包成静态库的机制，如果使用 <code>main.c</code> 的话可能会与实际的函数入口(含有 <code>int main(void)</code> 的)源文件冲突。</p></li><li><p>在 xfusion 下所有用户程序源文件都建议添加用户前缀。</p><p>原因同上，在没有将组件打包成静态库的机制 SDK 中重复的源文件可能导致文件冲突。</p><p>xfusion 内的源文件绝大部分都添加了 <code>xf_</code> 前缀。</p></li></ol></div><h1 id="新建工程" tabindex="-1">新建工程 <a class="header-anchor" href="#新建工程" aria-label="Permalink to &quot;新建工程&quot;">​</a></h1><p>新建工程通常有两种方式，一是通过 <code>xf create &lt;工程名&gt;</code> 的方式创建，二是直接复制示例到目标文件夹。</p><p>对于方式一的使用命令如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 首先导出 xfsuion 环境变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xfusion</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./export.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esp32</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后到您希望存放工程的文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/project</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在此创建名为 my_first_xfusion_project 的 xfusion 工程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_first_xfusion_project</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 之后就可以编译了</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_first_xfusion_project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>这种方式本质上是将 <code>examples/get_started/template_project</code> 工程复制到目标目录并改名。</p></div><h1 id="添加用户组件" tabindex="-1">添加用户组件 <a class="header-anchor" href="#添加用户组件" aria-label="Permalink to &quot;添加用户组件&quot;">​</a></h1><p>用户组件工程结构与 main 的工程结构类似，均由以下部分组成：</p><ol><li>组件头文件(<code>foo.h</code>)；</li><li>组件源文件(<code>foo.c</code>)；</li><li>收集脚本(<code>xf_collect.py</code>)；</li><li>配置菜单(<code>XFKconfig</code>)。</li></ol><p>收集脚本 <code>xf_collect.py</code> 和配置菜单 <code>XFKconfig</code> 使用前文的内容即可，组件头文件和组件源文件示例内容如下。</p><ol><li><p>组件头文件(<code>foo.h</code>)；</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __FOO_H__</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __FOO_H__</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xfconfig.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xf_utils.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*extern &quot;C&quot;*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* __FOO_H__ */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>组件源文件(<code>foo.c</code>)；</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TAG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;components_test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    XF_LOGI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TAG, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CONFIG_COMPONENTS_TEST_VAL: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, CONFIG_COMPONENTS_TEST_VAL);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><p>之后在用户主程序 <code>main</code> 中引入 <code>foo.h</code> 的头文件即可使用用户组件。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xf_main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当你填充完<a href="#file_tree">文件树</a>的内容后，可以使用：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> menuconfig</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>打开配置菜单，即可在用户组件 <code>user components</code> 看到刚刚编写用户组件 <code>foo</code> 内 <code>XFKconfig</code> 的配置项了。</p><p><img src="`+e+'" alt="image"></p><p>通过 <code>xf build</code> 和 <code>xf flash</code> 命令编译烧录程序后会输出如下日志：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>I (397)-components_test: CONFIG_COMPONENTS_TEST_VAL: 1234</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',32),t=[l];function h(c,r,d,o,k,u){return a(),i("div",null,t)}const E=s(p,[["render",h]]);export{g as __pageData,E as default};
